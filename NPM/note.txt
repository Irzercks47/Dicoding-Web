devDependecies digunakan untuk mendaftarkan package yang digunakan hanya selama pengembangan saja. Contohnya package yang berfungsi sebagai web server lokal seperti http-server, atau package yang berfungsi untuk membundel JavaScript seperti webpack. Untuk memasang package sebagai devDependencies kita gunakan perintah 
npm install <package-name> --save-dev

untuk menjalankan script yang ada di node module kita menggunakan npm run <script name> 
coba tambahkan "start": "http-server ." di bagian script yang ada di package.json
kemudian masukkan command

npm run start

untuk menghapus module menggunakan command 
npm uninstall <package-name>

jika pada devDependecies menggunakan command
npm uninstall <package-name> --save-dev

untuk menginstall secara global jadi dia akan terinstall di C:
npm install http-server -g

kegunaan webpack adalah untuk membundle file kita menjadi 1 berkas atau lebih jadi misalkan kita memiliki 200++ berkas dimana 100 merupakan file css dan 100 lagi merupakan file js 
kita bisa membundle menjadi 2 file yang dimana 1 berisi css dan 1 nya lagi berupa js webpack memiliki core concepts yaitu:

Entry : Titik awal di mana webpack akan menganalisa berkas dan membentuk dependency graph.
Output : Berkas bundel yang dihasilkan dari berkas-berkas yang dianalisis webpack berdasarkan entry point.
Loaders :  Transformation tools pada webpack, yang akan memproses setiap berkas selain JavaScript atau JSON yang kita impor menjadi format yang dapat digunakan ke tahap produksi.
Plugin :  Digunakan untuk melakukan tugas seperti optimasi bundel, management aset dan sebagainya.
Mode : Kondisi yang digunakan webpack sebagai acuan optimasi apa saja yang harus diterapkan dalam melakukan tugasnya. Dalam mode kita dapat menetapkan nilai production, development atau pun none.

Entry atau entry point merupakan modul pertama yang akan dianalisa oleh webpack ketika ia dijalankan. 
Melalui entry point inilah webpack akan membentuk dependency graph. Webpack akan mencari tahu modul lain yang digunakan pada entry point dan menggabungkannya menjadi satu static assets.
secara default entry harus ditaruh di folder src

Output merupakan salah satu properti yang terdapat pada webpack configuration. Properti ini berfungsi untuk memberitahu webpack di mana dan bagaimana lokasi static assets yang telah dibundel harus disimpan dan diberi nama. 
Standarnya lokasi penyimpanannya berada pada dist -> main.js. Lokasi dist merupakan lokasi standar untuk menyimpan berkas yang dihasilkan oleh webpack.

Dalam melaksanakan tugas, sejatinya Webpack hanya mengenali berkas JavaScript dan JSON. Namun melalui loaders Webpack dapat memproses berkas berformat lain seperti css, sass, pug, jsx, atau yang lainnya.
Loaders merupakan sebuah transformation tools pada Webpack yang akan memproses setiap berkas selain JavaScript atau JSON yang kita impor menjadi format yang dapat digunakan ke tahap produksi.

Plugin pada webpack digunakan untuk melakukan tugas seperti optimasi bundel, management aset, dan sebagainya. Dengan adanya plugin ini, webpack menjadi lebih fleksibel. 
Plugin merupakan tulang punggung dari webpack. Bahkan webpack sendiri dibangun menggunakan sistem plugin yang sama seperti yang kita lakukan pada webpack configuration.

mode merupakan salah satu properti yang terdapat pada webpack configuration. Dengan memberikan mode dengan nilai development, production, atau none, kita dapat melakukan optimasi pada webpack berdasarkan mode yang kita kehendaki.
Jika kita tidak menetapkan nilai pada properti mode, secara default akan bernilai production.

untuk memasang webpack kita bisa menggunakan command:
npm install webpack --save-dev
npm install webpack-cli --save-dev

atau bisa disingkat:
npm install webpack webpack-cli --save-dev
Mengapa kita membutuhkan dua package dalam memasang webpack? Apa fungsi package webpack dan webpack-cli? Package webpack merupakan package inti dari webpack itu sendiri. Sedangkan package webpack-cli merupakan package yang digunakan untuk membantu kita menjalankan webpack melalui sebuah perintah (Command Line Interface). 
Pada CLI juga kita dapat memberikan argumen seperti menetapkan berkas webpack config atau mode dalam proses build.

lalu pada package.json tambahakan ini di bagian script untuk menjalankan webpack via cli:
"build": "webpack"

dalam memakai webpack kita harus memperhatikan setting dari webpack kita dan kita juga harus melihat size file bundle yang telah dibuat webpack
karena bila file lebih besar dari yang disarankan maka akan mempengaruhi performa website dan kita harus juga memperhatikan dependencies dari bundle tersebut kalau terlalu banyak maka file bundle akan besar juga jadinya

webpack mempunyai banyak loader namun yang sering digunakan hanya beberapa 
contoh pada css menggunakan 2 loader yaitu css loader dan style loader
css-loader merupakan loader untuk memproses berkas dengan format .css. 
Sedangkan style-loader merupakan loader yang digunakan untuk membuat styling dapat diterapkan secara modular dengan menggunakan import statement.

untuk install keduanya kita bisa menggunakan command:
npm install style-loader css-loader --save-dev
Setelah berhasil, pada berkas webpack.config.js kita tambahkan properti module.rules dan isikan nilai loader
lalu tambahakan import pada file yang menjadi entry nya 

kemudian untk js ada namanya babel loader merupakan sebuah transpiler yang bertugas untuk mengubah sintaks JavaScript modern (ES6+) menjadi sintaks yang dapat didukung penuh oleh seluruh browser.

command yang digunakan untuk menginstall adalah
npm install @babel/core babel-loader @babel/preset-env --save-dev
Package @babel/core merupakan package inti yang harus dipasang ketika kita hendak menggunakan babel, baik pada webpack maupun tools yang lain.

Package babel-loader merupakan package yang diperlukan untuk menggunakan babel sebagai loader pada webpack.

Yang terakhir package @babel/preset-env merupakan package preset yang akan kita gunakan untuk membantu babel-loader dalam melakukan tugasnya. 
@babel/preset-env merupakan preset cerdas yang memungkinkan kita menggunakan sintaks JavaScript terbaru tanpa menetapkan secara spesifik sintaks JavaScript versi apa yang kita gunakan.

Ketika menerapkan rule untuk berkas .js, jangan lupa untuk menetapkan properti exclude dengan nilai “/node_modules/”. Apa artinya? Dengan menetapkan properti exclude itu berarti kita mengecualikan webpack untuk memproses berkas .js yang berada pada folder “node_modules”. 
Hal ini dapat meminimalisir proses yang tidak diperlukan, sehingga mempercepat proses build pada proyek kita.  

Ketika membuat web application tentunya kita membutuhkan minimal satu berkas HTML yang biasanya dinamai dengan index.html. Dengan menambahkan plugin HtmlWebpackPlugin, Webpack dapat membuatkan berkas HTML dan memasukkan script hasil bundel pada berkas HTML yang dibuat secara otomatis. 
HtmlWebpackPlugin juga mendukung templating dan penggunaannya sangat dapat dikonfigurasi.

commadn dari plugin ini adalah 
npm install html-webpack-plugin --save-dev

Setelah memasangnya, pada berkas webpack.config.js lakukan impor package html-webpack-plugin sebagai objek dengan nama HtmlWebpackPlugin.
pada plugin kita menetapkan konfigurasi untuk template dan filename. Template di sana merupakan berkas rujukan bagi pembuatan berkas HTML yang dihasilkan HtmlWebpackPlugin. 
Lalu nilai dari properti filename akan digunakan sebagai penamaan berkas HTML yang akan dihasilkan nanti.
untuk membedakannya set sehingga sekarang akan di hasilkan di src dengan nama template html
karena HtmlWebpackPlugin secara otomatis akan memasukan output script bundle pada berkas HTML yang dihasilkannya, kita tidak perlu menetapkan tag <script> secara manual pada berkas template.html. Dengan begitu kita dapat menghapusnya.

Saat ini setiap terjadi perubahan kode pada proyek, Anda perlu melakukan build ulang untuk melihat hasilnya. Tak peduli perubahan tersebut bersifat  mayor ataupun hanya sekadar ganti warna saja. Karena untuk melihat perubahan terbaru kita juga perlu memperbaharui berkas bundle.js. Tentu sangat merepotkan bukan?

Untunglah webpack menyediakan fitur live-reloading yang dapat mempercepat proses pengembangan menggunakan Webpack Dev Server. Dengan ini kita dapat melihat perubahan secara langsung tanpa harus menjalankan ulang perintah build.

Untuk menggunakan Webpack Dev Server langkah pertama adalah kita pasang package webpack-dev-server pada devDependencies menggunakan npm.

npm install webpack-dev-server --save-dev